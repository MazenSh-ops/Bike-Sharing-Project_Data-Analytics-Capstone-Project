Code used In R studio

## Installing the Packages
install.packages('tidyverse')
install.packages('janitor')
install.packages('lubridate')
install.packages("ggplot2")
install.packages("vctrs", type = "binary")


## Loading the installed Packages
library("tidyverse")
library("janitor")
library("lubridate")
library("ggplot2")


## Importing the CSV files
tripdata_2020_Q1 <- read.csv("Divvy_Trips_2020_Q1.csv")
tripdata_202004 <- read.csv("202004-divvy-tripdata.csv")
tripdata_202005 <- read.csv("202005-divvy-tripdata.csv")
tripdata_202006 <- read.csv("202006-divvy-tripdata.csv")
tripdata_202007 <- read.csv("202007-divvy-tripdata.csv")
tripdata_202008 <- read.csv("202008-divvy-tripdata.csv")
tripdata_202009 <- read.csv("202009-divvy-tripdata.csv")
tripdata_202010 <- read.csv("202010-divvy-tripdata.csv")
tripdata_202011 <- read.csv("202011-divvy-tripdata.csv")
tripdata_202012 <- read.csv("202012-divvy-tripdata.csv")


## Examining the datasets
str(tripdata_2020_Q1)
str(tripdata_202004)
str(tripdata_202005)
str(tripdata_202006)
str(tripdata_202007)
str(tripdata_202008)
str(tripdata_202009)
str(tripdata_202010)
str(tripdata_202011)
str(tripdata_202012)


## The "start_station_id" and "end_station_id" in tripdata_202012 is not an int unlike the other datasets.
## warn=-1: Ignores the warning message.
## mutate() adds new variables and preserves existing ones; transmute() adds new variables and drops existing ones. New variables overwrite existing variables of the same name. Variables can be removed by setting their value to NULL.

options(warn = -1)

tripdata_202012 <- mutate(tripdata_202012, start_station_id= as.integer(start_station_id))
tripdata_202012 <- mutate(tripdata_202012, end_station_id=as.integer(end_station_id))
str(tripdata_202012)

## Combined all the individual datasets into one big dataset.

tripdata_2020 <- rbind(tripdata_2020_Q1, tripdata_202004, tripdata_202005, tripdata_202006, tripdata_202007, tripdata_202008, tripdata_202009, tripdata_202010, tripdata_202011, tripdata_202012)


## Finding the total number of rows for the individual data sets and confirming is it correct.

rowtotal <- sum(
  nrow(tripdata_2020_Q1),
  nrow(tripdata_202004), 
  nrow(tripdata_202005),
  nrow(tripdata_202006), 
  nrow(tripdata_202007),
  nrow(tripdata_202008),
  nrow(tripdata_202009),
  nrow(tripdata_202010),
  nrow(tripdata_202011),
  nrow(tripdata_202012))
 
print(rowtotal)

print(nrow(tripdata_2020))


## Examining Combined Dataset

str(tripdata_2020)
head(tripdata_2020)


## Cleaning the Data
## Formatting the data into individual columns, and adding a day of the week column.
## $ = To access one variable in a dataset, use the dollar sign “$”. For example, $vote1 returns the vote1 variable (the vote1 column).
## abbreviated month %b, %d day as a number, %y two digit year, %A as an unabbreviated weekday 
## 

tripdata_2020$date <- as.Date(tripdata_2020$started_at)
tripdata_2020$month <- format(as.Date(tripdata_2020$date), " %b ")
tripdata_2020$day <- format(as.Date(tripdata_2020$date), "%d")
tripdata_2020$year <- format(as.Date(tripdata_2020$date), "%Y")
tripdata_2020$day_of_week <- format(as.Date(tripdata_2020$date), "%A")
head(tripdata_2020)


## Now to remove the Duplicate and all the NA cells.
## the duplicated() function, identifies duplicate elements in the database.
## paste converts its arguments (via as.character) to character strings, and concatenates them (separating them by the string given by sep). If the arguments are vectors, they are concatenated term-by-term to give a character vector result. Vector arguments are recycled as needed, with zero-length arguments being recycled to "".

tripdata_2020 <- drop_na(tripdata_2020)

tripdata_2020_no_duplicates <- tripdata_2020[!duplicated(tripdata_2020$ride_id),]
print(paste("Removed", nrow(tripdata_2020)-nrow(tripdata_2020_no_duplicates), "duplicate rows"))


## Creating the ride_length column and transforming to time stamps as opposed to character strings
## Used this for help: https://www.youtube.com/watch?v=rpPt0JCzL6Q

tripdata_2020_no_duplicates$started_at <- lubridate::ymd_hms(tripdata_2020_no_duplicates$started_at)
tripdata_2020_no_duplicates$ended_at <- lubridate::ymd_hms(tripdata_2020_no_duplicates$ended_at)
str(tripdata_2020_no_duplicates)

tripdata_2020_v2 <- mutate(tripdata_2020_no_duplicates, ride_length = difftime(ended_at, started_at, units = "mins"))
str(tripdata_2020_v2)


## Filtering out the trips with a ride length less than 0 mins

nrow(tripdata_2020_v2[tripdata_2020_v2$ride_length < 0 ,])
tripdata_2020_v3 <- tripdata_2020_v2[!tripdata_2020_v2$ride_length < 0,]
glimpse(tripdata_2020_v3)


## Determining the number of casual vs annual members


rider_type_total <- table(tripdata_2020_v3$member_casual)
view(rider_type_total)


## Statistical Analysis of the ride length column
## summarise() creates a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input. It will contain one column for each grouping variable and one column for each of the summary statistics that you have specified.



trip_stats <- tripdata_2020_v3 %>%
  group_by(member_casual) %>%
  summarise(average_ride_length = mean(ride_length), standard_deviation = sd(ride_length), median_ride_length= median(ride_length), min_ride_length = min(ride_length), max_ride_length = max(ride_length))
head(trip_stats)


## Determining the most frequent day when the bikes are used.
## Used help from code 1 earnt from tutorialspoint.com
##R does not have a standard in-built function to calculate mode. So we create a user function to calculate mode of a data set in R. This function takes the vector as input and gives the mode value as output.
## and help from this https://www.kaggle.com/code/mmaguire/google-data-analytics-capstone-case-study-1

getmode <- function(v) {
  uniqv <- unique(v)
  uniqv[which.max(tabulate(match(v, uniqv)))]
}

weekday_mode <- getmode(tripdata_2020_v3$day_of_week)

print(weekday_mode)


## Determining the most popular day based on rider type.
## use this to understand the levels: If the factor is ordered, then the specific order of the levels matters (small < medium < large).
## http://www.cookbook-r.com/Manipulating_data/Changing_the_order_of_levels_of_a_factor/
## use this to understand
## (n) <- Use with group_by() or summarize . Counts the number of rows


tripdata_2020_v3$day_of_week <- ordered(tripdata_2020_v3$day_of_week, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
tripdata_2020_v3 %>% 
  group_by(member_casual, day_of_week) %>% 
  summarise(rider_type_total = n(), average_ride_length = mean(ride_length)) %>% 
  arrange(member_casual, day_of_week)


## Finding the popular months during 2020
## - is for descending order

popular_month <- tripdata_2020_v3 %>%
  group_by(month) %>%
  summarise(number_of_rides = n(), average_duration = mean(ride_length)) %>%
  arrange(-number_of_rides)
View(popular_month)

## finding the most popular station by using the previous mode function we have

station_mode <- getmode(tripdata_2020_v3$start_station_name)
print(station_mode)


## finding the most popular start station for members

popular_start_stations_member <- tripdata_2020_v3 %>%
  filter(member_casual == 'member') %>%
  group_by(start_station_name) %>%
  summarise(number_of_starts = n()) %>%
  filter(start_station_name != "") %>%
  arrange(-number_of_starts)

head(popular_start_stations_member)


## finding the most popular start station for casual riders

popular_start_stations_casual <- tripdata_2020_v3 %>%
  filter(member_casual == 'casual') %>%
  group_by(start_station_name) %>%
  summarise(number_of_starts = n()) %>%
  filter(start_station_name != "") %>%
  arrange(-number_of_starts)

head(popular_start_stations_casual)





## Creating the Data Viz using GGplot
## Using the geom_bar (position="dodge") places the two bars side by side.

## annual member vs casual rider 
tripdata_2020_v3 %>% 
  group_by(member_casual) %>%
  summarise (total_rider_type = n()) %>%
  ggplot (aes(x= member_casual, y = total_rider_type, fill = member_casual)) + geom_col(position = "dodge") + geom_text(aes(label = total_rider_type, vjust = -0.25))
  
## rider types ride duration


rider_type_average_duration <- tripdata_2020_v3 %>% 
  group_by(member_casual) %>% 
  summarize(average_ride_length = mean(ride_length))

rider_type_average_duration %>% 
  ggplot(aes(x = member_casual, y = average_ride_length, fill = member_casual)) +
  geom_col(position = "dodge") + geom_text(aes(label = average_ride_length, vjust = -0.25))



## Weekday usage by casual riders and annual members
## The arrange() function in R programming is used to reorder the rows of a data frame/table by using column names. These columns are passed as the expression in the function.

tripdata_2020_v3 %>% 
  group_by(member_casual, day_of_week) %>% 
  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>% 
  arrange(member_casual, day_of_week)  %>% 
  ggplot(aes(x = day_of_week, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")


## Visualization of the number of trips by members and casual riders by the weekday


tripdata_2020_v3 %>% 
  group_by(member_casual, day_of_week) %>% 
  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>% 
  arrange(member_casual, day_of_week)  %>% 
  ggplot(aes(x = day_of_week, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")


## Number of trips by both casual and annual members by month.

tripdata_2020_v3$month <- ordered(tripdata_2020_v3$month, levels=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
head(tripdata_2020_v3$month)



tripdata_2020_v3 %>% 
  group_by(member_casual, month) %>% 
  summarise(number_of_rides = n(),average_duration = mean(ride_length) ) %>% 
  arrange(member_casual, month)  %>% 
  ggplot(aes(x = month, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge") +
  geom_text(aes(label = number_of_rides, angle = 90)) +
  facet_wrap(~member_casual)




tripdata_2020_v3 %>% 
  group_by(member_casual, month) %>% 
  summarise(number_of_rides = n()) %>% 
  arrange(member_casual, month)  %>% 
  ggplot(aes(x = month, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge") +
  geom_text(aes(label = number_of_rides, angle = 90)) +
  facet_wrap(~member_casual)
